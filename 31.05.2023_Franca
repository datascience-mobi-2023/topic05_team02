```{r}
dim(prism.exp)
class(prism.exp[1,2])
pheatmap(prism.exp, show_rownames = TRUE, show_colnames = TRUE, na.rm=TRUE) 
```
```{r}
#compute genes with highest variance in expression
prism.exp.var<- apply(prism.exp,MARGIN=2,FUN=var)

#top25% with hoghest variance:
q75.exp.var = quantile(prism.exp.var, probs = 0.75)   # what is the 75% quantile of the variance?
i.topvar.exp = which(prism.exp.var >= q75.exp.var)   # all columns (genes) with variance higher than 75%

prism.exp.topvar = prism.exp[,i.topvar.exp]   # only select the gene with a variance in the top 25%

```
DATA CLEANUP
```{r}
#reorder prism.cl
colnames(prism.cl)
prism.cl_cleaned<-prism.cl[,c(1,2,13,12,16,17,6,20,7,19)]

##make cell lines as row names
rownames(prism.cl_cleaned)=prism.cl_cleaned$DepMap_ID
prism.cl_cleaned=prism.cl_cleaned[-c(1)]
```
```{r}
dim(prism.exp)
class(prism.exp[1,2])
pheatmap(prism.exp, show_rownames = TRUE, show_colnames = TRUE, na.rm=TRUE) 
```
WORK ON PRISM.EXP
```{r cars}
dim(prism.exp)
```
```{r}
#compute genes with highest variance in expression
prism.exp.var<- apply(prism.exp,MARGIN=2,FUN=var)

#top25% with highest varianca:
q75.exp.var = quantile(prism.exp.var, probs = 0.75)   # what is the 75% quantile of the variance?
i.topvar.exp = which(prism.exp.var >= q75.exp.var)   # all columns (genes) with variance higher than 75%

prism.exp.topvar = prism.exp[,i.topvar.exp]   # only select the gene with a variance in the top 25%
```
```{r}
print(prism.exp.topvar)
```

PCA for PRISM.EXP
```{r}
pca = prcomp(t(prism.exp), center = FALSE, scale = FALSE)
pca$sdev
print(pca$sdev[0:66])
colnames(prism.exp.var %% pca$sdev[0:66])
```
CORRELATION copy number variation & expression
```{r}
#rownames(prism.exp %in% prism.cnv)
#This is because the rownames() function is used to retrieve the row names of a data frame or matrix, but the %in% operator returns a logical vector indicating which elements of the left-hand side vector are also in the right-hand side vector. The output of %in% is not a data frame or matrix, but a logical vector that does not have row names. Therefore, when you apply rownames() to the result of the %in% operation, it returns NULL indicating that there are no row names associated with the logical vector.
#prism.exp %in% prism.cnv

#identify missing rows in exp that are present in cnv
diff_rows <- setdiff(rownames(prism.cnv), rownames(prism.exp))
diff_rows <- unique(c(diff_rows, setdiff(rownames(prism.exp), rownames(prism.cnv))))
print(diff_rows)

#prism.cnv_corr_cleaned<-prism.cnv[-c("ACH-000309","ACH-000047","ACH-000979","ACH-001024")]
#which(rownames(prism.cnv)=="ACH-001024")
#85, 268, 294,307
prism.cnv_corr_cleaned<- prism.cnv[-c(85,268,294,307),]

#identify missing columns that are present in cnv but not in exp
diff_cols <- setdiff(colnames(prism.cnv), colnames(prism.exp))
diff_cols <- unique(c(diff_cols, setdiff(colnames(prism.exp), colnames(prism.cnv))))
print(diff_cols)

diff_cols2 <- setdiff(colnames(prism.exp), colnames(prism.cnv))
diff_cols2<- unique(c(diff_cols, setdiff(colnames(prism.cnv), colnames(prism.exp))))
prism.cnv_corr_cleaned<-prism.cnv_corr_cleaned[-which(colnames(prism.cnv) %in% diff_cols)]
prism.exp_corr_cleaned<-prism.exp[-which(colnames(prism.exp) %in% diff_cols2)]

#reorder rows in an ascending way
#1.step:rownames(prism.cnv_corr_cleaned)
prism.cnv_corr_cleaned<- prism.cnv_corr_cleaned[order(rownames(prism.cnv_corr_cleaned)),]
prism.exp_corr_cleaned<- prism.exp_corr_cleaned[order(rownames(prism.exp_corr_cleaned)),]

#reorder columns by names
prism.cnv_corr_cleaned= prism.cnv_corr_cleaned[,colnames(prism.exp_corr_cleaned)]

#colnames(prism.cnv_corr_cleaned)

exp_cnv_corr<- cor(prism.exp_corr_cleaned[,1:1000], prism.cnv_corr_cleaned[,1:1000],use= "pairwise.complete.obs", method= c("spearman"))
#4min Laufzeit für 1000 spalten

plot(exp_cnv_corr)
```

clustering ähnlicher enexpressionsprofile in Zelllinien
```{r}
km = kmeans(x=t(prism.exp), 
            centers = 23, 
            nstart = 10)
#Centers=k; nstart= how many random sets should be chosen?

#run k-means for k=2 to k=7 clusters, and for each k check the WSS value. How does WSS evolve with increasing k?
##Elbow method
#calculate within-square-distance
wss = sapply(15:27,function(k) { 
  kmeans(x=t(prism.exp), centers =k)$tot.withinss
})
plot(15:27,wss,type='b',pch=19,xlab="Number of clusters K",
     ylab="Total within-clusters sum of squares")
```

```{r}
mean.prism<- apply(t(prism),MARGIN=1,FUN=mean, na.rm=TRUE)
hist(mean.prism)
sd.prism<-apply(t(prism),MARGIN=1,FUN=sd, na.rm=TRUE)
hist(sd.prism)
var.prism<-apply(t(prism),MARGIN=1,FUN=var, na.rm=TRUE)
hist(var.prism)

hist(t(prism.exp),xlab="Transcripts per million")
```
KIDNEY CANCER
```{r}
install.packages("dplyr")

##vektoren mit einzelnen cancertypes erstellen
unique(prism.cl_cleaned$disease)
cancertypes<- c(unique(prism.cl_cleaned$disease))
sort.int(prism.cl_disease, method= cancertypes, na.last=NA, index.return=TRUE)
print(cancertypes)
#rownames of Kidney Cancer
which(prism.cl_cleaned$disease=="Kidney Cancer")
rownames(kidneyrows)
#rownames for each cancer

```

PRISM.ACHILLES
```{r}
hist(t(prism.achilles), n=500)
prism.achilles.var=apply(prism.achilles,MARGIN=2,FUN=var)
plot(prism.achilles.var, xlab="Gene", ylab="Variance of gene knockout")
abline(h=quantile(prism.achilles.var,probs=c(0.99,0.98,0.9,0.75),na.rm=TRUE),col='RED')
##->cell lines with high variance in sensitivity to gene knockout
```

CREATION of DATA-FRAMES for the individual CANCER TYPES for PRISM.EXP
```{r}
##vektoren mit einzelnen cancertypes erstellen
unique(prism.cl_cleaned$disease)
cancertypes<- c(unique(prism.cl_cleaned$disease))
print(cancertypes)

#kidney
kidney_df= prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Kidney Cancer")),]
prism.exp.kidney= prism.exp[rownames(kidney_df),]

#Bone cancer
#bone_df= prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Bone Cancer")),]
#prism.exp.bone= prism.exp[rownames(bone_df),]
#Rhabdoid
#prism.exp.rhabdoid= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Rhabdoid")),]),]
#Neuroblastoma
#prism.exp.neuroblastoma= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Neuroblastoma")),]),]
#Sarcoma
#prism.exp.sarcoma= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Sarcoma")),]),]
#Brain Cancer
#prism.exp.brain= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Brain Cancer")),]),]
#Liver Cancer
#prism.exp.liver= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Liver Cancer")),]),]
#Colon/Colorectal Cancer
#prism.exp.colon= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Colon/Colorectal Cancer")),]),]
#Skin Cancer
#prism.exp.skin= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Skin Cancer")),]),]
#Bladder Cancer
#prism.exp.bladder= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Bladder Cancer")),]),]
#Lung Cancer
#prism.exp.lung= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Lung Cancer")),]),]
#Ovarian Cancer
#prism.exp.ovarian= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Ovarian Cancer")),]),]
#Breast Cancer
#prism.exp.breast= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Breast Cancer")),]),]
#Pancreatic Cancer
#prism.exp.pancreas= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Pancreatic Cancer")),]),]
#Gastric Cancer
#prism.exp.gastric= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Gastric Cancer")),]),]
#Prostate Cancer
#prism.exp.prostate= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Prostate Cancer")),]),]
#Fibroblast
#prism.exp.fibroblast= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Fibroblast")),]),]
#Gallbladder Cancer
#prism.exp.gallbladder= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Gallbladder Cancer")),]),]
#Thyroid Cancer
#prism.exp.thyroid= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Thyroid Cancer")),]),]
#Bilde Duct Cancer
#prism.exp.bileduct= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Bile Duct Cancer")),]),]
#Head and Neck Cancer
#prism.exp.head= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Head and Neck Cancer")),]),]
#Endometrial/Uterine Cancer
#prism.exp.endometrial= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Endometrial/Uterine Cancer")),]),]
#Esophageal Cancer
#prism.exp.esophageal= prism.exp[rownames(prism.cl_cleaned[c(which(prism.cl_cleaned$disease== "Esophageal Cancer")),]),]


##nach cancer type sortieren und dann jeweil die varianz für die spezifischen extrahierten rows
#apply(hist to all df)

```
CREATION of DATA-FRAMES for the individual CANCER TYPES for PRISM.EXP and PRISM
```{r}
#Kidney
prism.achilles.kidney= prism.achilles[rownames(kidney_df),]
rownames(prism.achilles)=="ACH-000046"
###für 6 Zelllinien wurden keine knock-out scores bestimmt!

prism.kidney=prism[rownames(kidney_df),]
print(rownames(kidney_df))
```

#irgendwas für Arne, Wirksame Drogen (2% Quantil und deren mode of action/ursprüngliches Einsatzgebiet)
```{r}
#wirksameDrogen2%= colnames(prism[which(apply(prism, 2, min, na.rm=T)< quantile(prism, probs=c(0.02),na.rm=TRUE))])

#idx.kidney= colnames(prism.drug.means.kidney[which(apply(prism.drug.means.kidney, 2, min, na.rm=T)< -1.8)])

#wirksameDrogen_0.02= colnames(prism[which(apply(prism, 2, min)< -5.431033)])
#quantile(prism, probs=c(0.02),na.rm=TRUE)

wirksameDrogen_0.01= colnames(prism[which(apply(prism, 2, min, na.rm=T)< quantile(prism, probs=c(0.01),na.rm=TRUE))])
print(wirksameDrogen_0.01) 
#1% Quantil-> 961 drug/concentration combinations

wirksameDrogen_0.005= colnames(prism[which(apply(prism, 2, min, na.rm=T)< quantile(prism, probs=c(0.005),na.rm=TRUE))])
print(wirksameDrogen_0.005) 
#0.5% Quantil-> 689 drug/concentration combinations

unique(prism.treat[prism.treat$broad_id %in% wirksameDrogen_0.01,]$moa)
#->530
unique(prism.treat[prism.treat$broad_id %in% wirksameDrogen_0.01,]$indication)
#->338
#amount of different mode of actions-> 530, indications->338
unique(prism.treat$moa)
unique(prism.treat$indication)
```

```{r}
range(prism.cnv)
hist(t(prism.cnv), main= "Frequency of copy number variation",n=300)
plot(density(t(prism.cnv)))
##prozentsatz von gesamtanzahl bei arne

#install.packages("ggplot2")
#ggplot2(prism.cnv, +
        # geom_histogram(fill="steelblue",color="grey",binwidth=1)+
        # geom_density(alpha=0.2))
```

